// Code generated by protoc-gen-go.
// source: citizens.proto
// DO NOT EDIT!

/*
Package citizens is a generated protocol buffer package.

It is generated from these files:
	citizens.proto

It has these top-level messages:
	Citizen
	GetRequest
	GetResponse
	SelectRequest
	SelectResponse
	CreateRequest
	CreateResponse
	UpdateRequest
	UpdateResponse
	DeleteRequest
	DeleteResponse
*/
package citizens

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Citizen struct {
	Id        string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Fullname  string `protobuf:"bytes,2,opt,name=fullname" json:"fullname,omitempty"`
	Email     string `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	CreatedAt int64  `protobuf:"varint,4,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	UpdatedAt int64  `protobuf:"varint,5,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
}

func (m *Citizen) Reset()                    { *m = Citizen{} }
func (m *Citizen) String() string            { return proto.CompactTextString(m) }
func (*Citizen) ProtoMessage()               {}
func (*Citizen) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Citizen) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Citizen) GetFullname() string {
	if m != nil {
		return m.Fullname
	}
	return ""
}

func (m *Citizen) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Citizen) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Citizen) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

type GetRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type GetResponse struct {
	Data *Citizen `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *GetResponse) Reset()                    { *m = GetResponse{} }
func (m *GetResponse) String() string            { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()               {}
func (*GetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetResponse) GetData() *Citizen {
	if m != nil {
		return m.Data
	}
	return nil
}

type SelectRequest struct {
}

func (m *SelectRequest) Reset()                    { *m = SelectRequest{} }
func (m *SelectRequest) String() string            { return proto.CompactTextString(m) }
func (*SelectRequest) ProtoMessage()               {}
func (*SelectRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type SelectResponse struct {
	Data []*Citizen `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
}

func (m *SelectResponse) Reset()                    { *m = SelectResponse{} }
func (m *SelectResponse) String() string            { return proto.CompactTextString(m) }
func (*SelectResponse) ProtoMessage()               {}
func (*SelectResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SelectResponse) GetData() []*Citizen {
	if m != nil {
		return m.Data
	}
	return nil
}

type CreateRequest struct {
	Data *Citizen `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *CreateRequest) Reset()                    { *m = CreateRequest{} }
func (m *CreateRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()               {}
func (*CreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CreateRequest) GetData() *Citizen {
	if m != nil {
		return m.Data
	}
	return nil
}

type CreateResponse struct {
	Data *Citizen `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *CreateResponse) Reset()                    { *m = CreateResponse{} }
func (m *CreateResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateResponse) ProtoMessage()               {}
func (*CreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *CreateResponse) GetData() *Citizen {
	if m != nil {
		return m.Data
	}
	return nil
}

type UpdateRequest struct {
}

func (m *UpdateRequest) Reset()                    { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()               {}
func (*UpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type UpdateResponse struct {
	Data *Citizen `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *UpdateResponse) Reset()                    { *m = UpdateResponse{} }
func (m *UpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateResponse) ProtoMessage()               {}
func (*UpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *UpdateResponse) GetData() *Citizen {
	if m != nil {
		return m.Data
	}
	return nil
}

type DeleteRequest struct {
}

func (m *DeleteRequest) Reset()                    { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()               {}
func (*DeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type DeleteResponse struct {
	Data *Citizen `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *DeleteResponse) Reset()                    { *m = DeleteResponse{} }
func (m *DeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteResponse) ProtoMessage()               {}
func (*DeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *DeleteResponse) GetData() *Citizen {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*Citizen)(nil), "citizens.Citizen")
	proto.RegisterType((*GetRequest)(nil), "citizens.GetRequest")
	proto.RegisterType((*GetResponse)(nil), "citizens.GetResponse")
	proto.RegisterType((*SelectRequest)(nil), "citizens.SelectRequest")
	proto.RegisterType((*SelectResponse)(nil), "citizens.SelectResponse")
	proto.RegisterType((*CreateRequest)(nil), "citizens.CreateRequest")
	proto.RegisterType((*CreateResponse)(nil), "citizens.CreateResponse")
	proto.RegisterType((*UpdateRequest)(nil), "citizens.UpdateRequest")
	proto.RegisterType((*UpdateResponse)(nil), "citizens.UpdateResponse")
	proto.RegisterType((*DeleteRequest)(nil), "citizens.DeleteRequest")
	proto.RegisterType((*DeleteResponse)(nil), "citizens.DeleteResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Citizenship service

type CitizenshipClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Select(ctx context.Context, in *SelectRequest, opts ...grpc.CallOption) (*SelectResponse, error)
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type citizenshipClient struct {
	cc *grpc.ClientConn
}

func NewCitizenshipClient(cc *grpc.ClientConn) CitizenshipClient {
	return &citizenshipClient{cc}
}

func (c *citizenshipClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := grpc.Invoke(ctx, "/citizens.Citizenship/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *citizenshipClient) Select(ctx context.Context, in *SelectRequest, opts ...grpc.CallOption) (*SelectResponse, error) {
	out := new(SelectResponse)
	err := grpc.Invoke(ctx, "/citizens.Citizenship/Select", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *citizenshipClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := grpc.Invoke(ctx, "/citizens.Citizenship/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *citizenshipClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := grpc.Invoke(ctx, "/citizens.Citizenship/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *citizenshipClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := grpc.Invoke(ctx, "/citizens.Citizenship/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Citizenship service

type CitizenshipServer interface {
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Select(context.Context, *SelectRequest) (*SelectResponse, error)
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
}

func RegisterCitizenshipServer(s *grpc.Server, srv CitizenshipServer) {
	s.RegisterService(&_Citizenship_serviceDesc, srv)
}

func _Citizenship_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CitizenshipServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/citizens.Citizenship/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CitizenshipServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Citizenship_Select_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CitizenshipServer).Select(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/citizens.Citizenship/Select",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CitizenshipServer).Select(ctx, req.(*SelectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Citizenship_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CitizenshipServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/citizens.Citizenship/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CitizenshipServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Citizenship_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CitizenshipServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/citizens.Citizenship/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CitizenshipServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Citizenship_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CitizenshipServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/citizens.Citizenship/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CitizenshipServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Citizenship_serviceDesc = grpc.ServiceDesc{
	ServiceName: "citizens.Citizenship",
	HandlerType: (*CitizenshipServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Citizenship_Get_Handler,
		},
		{
			MethodName: "Select",
			Handler:    _Citizenship_Select_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Citizenship_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Citizenship_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Citizenship_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "citizens.proto",
}

func init() { proto.RegisterFile("citizens.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 345 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x4d, 0x6b, 0x02, 0x31,
	0x14, 0x74, 0x77, 0xfd, 0x7c, 0xe2, 0x96, 0x06, 0x8b, 0x8b, 0x50, 0x90, 0x80, 0xe0, 0xc9, 0x83,
	0x95, 0x7a, 0xea, 0x41, 0x2c, 0x48, 0xaf, 0x5b, 0x7a, 0x96, 0xd4, 0xbc, 0xd2, 0xc0, 0xaa, 0x5b,
	0x93, 0xbd, 0xf4, 0x1f, 0xf4, 0x57, 0xf5, 0xaf, 0x15, 0x93, 0x8d, 0x26, 0x15, 0x4a, 0x3d, 0xbe,
	0x99, 0x37, 0xb3, 0x93, 0x79, 0x2c, 0xc4, 0x6b, 0xa1, 0xc4, 0x27, 0x6e, 0xe5, 0x38, 0xdf, 0xef,
	0xd4, 0x8e, 0x34, 0xed, 0x4c, 0xbf, 0x02, 0x68, 0x2c, 0xcc, 0x40, 0x62, 0x08, 0x05, 0x4f, 0x82,
	0x41, 0x30, 0x6a, 0xa5, 0xa1, 0xe0, 0xa4, 0x0f, 0xcd, 0xb7, 0x22, 0xcb, 0xb6, 0x6c, 0x83, 0x49,
	0xa8, 0xd1, 0xe3, 0x4c, 0xba, 0x50, 0xc3, 0x0d, 0x13, 0x59, 0x12, 0x69, 0xc2, 0x0c, 0xe4, 0x16,
	0x60, 0xbd, 0x47, 0xa6, 0x90, 0xaf, 0x98, 0x4a, 0xaa, 0x83, 0x60, 0x14, 0xa5, 0xad, 0x12, 0x99,
	0xab, 0x03, 0x5d, 0xe4, 0xdc, 0xd2, 0x35, 0x43, 0x97, 0xc8, 0x5c, 0xd1, 0x21, 0xc0, 0x12, 0x55,
	0x8a, 0x1f, 0x05, 0x4a, 0x45, 0x7a, 0xd0, 0x28, 0x24, 0xee, 0x57, 0xc7, 0x48, 0xf5, 0xc3, 0xf8,
	0xc4, 0xe9, 0x14, 0xda, 0x7a, 0x4d, 0xe6, 0xbb, 0xad, 0x44, 0x32, 0x84, 0x2a, 0x67, 0x8a, 0xe9,
	0xa5, 0xf6, 0xe4, 0x7a, 0x7c, 0x7c, 0x6a, 0xf9, 0xac, 0x54, 0xd3, 0xf4, 0x0a, 0x3a, 0xcf, 0x98,
	0xe1, 0xda, 0xfa, 0xd3, 0x19, 0xc4, 0x16, 0x38, 0x73, 0x8a, 0xfe, 0x72, 0xba, 0x87, 0xce, 0x42,
	0x3f, 0xc9, 0x26, 0xfd, 0x67, 0x82, 0x19, 0xc4, 0x56, 0x77, 0x71, 0xf4, 0x17, 0x5d, 0x92, 0x13,
	0xdd, 0x02, 0x17, 0x3b, 0x3d, 0x62, 0x86, 0x9e, 0x93, 0x05, 0x2e, 0x72, 0x9a, 0x7c, 0x87, 0xd0,
	0x2e, 0x11, 0xf9, 0x2e, 0x72, 0x32, 0x85, 0x68, 0x89, 0x8a, 0x74, 0x4f, 0xfb, 0xa7, 0x53, 0xf6,
	0x6f, 0x7e, 0xa1, 0xe6, 0x53, 0xb4, 0x42, 0x1e, 0xa0, 0x6e, 0x6e, 0x40, 0x7a, 0xa7, 0x15, 0xef,
	0x4c, 0xfd, 0xe4, 0x9c, 0x70, 0xe5, 0xa6, 0x51, 0x57, 0xee, 0xdd, 0xc6, 0x95, 0xfb, 0xe5, 0x1b,
	0xb9, 0xa9, 0xd1, 0x95, 0x7b, 0x4d, 0xbb, 0x72, 0xbf, 0x71, 0x23, 0x37, 0xdd, 0xb9, 0x72, 0xaf,
	0x5e, 0x57, 0xee, 0xd7, 0x4c, 0x2b, 0xaf, 0x75, 0xfd, 0x2b, 0xde, 0xfd, 0x04, 0x00, 0x00, 0xff,
	0xff, 0x5d, 0x40, 0x23, 0x05, 0x9c, 0x03, 0x00, 0x00,
}
